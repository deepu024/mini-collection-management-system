openapi: 3.0.0
info:
  title: Mini Collection Management API
  description: API documentation for the Mini Collection Management System
  version: 1.0.0

servers:
  - url: http://localhost:4000  # Adjust if needed
    description: Local dev server

paths:
  /api/auth/register:
    post:
      summary: Register a new user
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterUser'
      responses:
        '201':
          description: User created
        '400':
          description: User already exists
        '500':
          description: Server error

  /api/auth/login:
    post:
      summary: Login an existing user
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginUser'
      responses:
        '200':
          description: Returns JWT token
        '400':
          description: Invalid credentials
        '500':
          description: Server error

  /api/customers:
    get:
      summary: Get all customers
      tags:
        - Customers
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of customers
        '401':
          description: Unauthorized
    post:
      summary: Create a new customer
      tags:
        - Customers
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCustomer'
      responses:
        '201':
          description: Customer created
        '401':
          description: Unauthorized
        '500':
          description: Server error

  /api/customers/{id}:
    get:
      summary: Get a single customer
      tags:
        - Customers
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: Single customer
        '404':
          description: Customer not found
        '401':
          description: Unauthorized
    put:
      summary: Update a customer
      tags:
        - Customers
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCustomer'
      responses:
        '200':
          description: Customer updated
        '401':
          description: Unauthorized
        '404':
          description: Customer not found
    delete:
      summary: Delete a customer
      tags:
        - Customers
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: Customer deleted
        '401':
          description: Unauthorized
        '404':
          description: Not found

  /api/customers/bulk-upload:
    post:
      summary: Bulk upload customers via Excel
      tags:
        - Customers
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '200':
          description: Bulk upload result
        '401':
          description: Unauthorized
        '500':
          description: Server error

  /api/payments/status:
    patch:
      summary: Update payment status
      tags:
        - Payments
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePaymentStatus'
      responses:
        '200':
          description: Payment status updated
        '401':
          description: Unauthorized
        '500':
          description: Server error

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    RegisterUser:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
      required:
        - email
        - password

    LoginUser:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
      required:
        - email
        - password

    CreateCustomer:
      type: object
      properties:
        name:
          type: string
        contactInfo:
          type: string
        outstandingAmount:
          type: number
        paymentDueDate:
          type: string
          format: date-time
        paymentStatus:
          type: string
          enum:
            - PENDING
            - COMPLETED
            - OVERDUE
      required:
        - name

    UpdateCustomer:
      type: object
      properties:
        name:
          type: string
        contactInfo:
          type: string
        outstandingAmount:
          type: number
        paymentDueDate:
          type: string
          format: date-time
        paymentStatus:
          type: string
          enum:
            - PENDING
            - COMPLETED
            - OVERDUE

    UpdatePaymentStatus:
      type: object
      properties:
        customerId:
          type: number
        status:
          type: string
          enum:
            - PENDING
            - COMPLETED
            - OVERDUE
      required:
        - customerId
        - status
